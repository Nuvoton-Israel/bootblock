/*----------------------------------------------------------------------------*/
/* SPDX-License-Identifier: GPL-2.0                                           */
/*                                                                            */
/* Copyright (c) 2010-2019 by Nuvoton Technology Corporation                  */
/* All rights reserved                                                        */
/*                                                                            */
/*----------------------------------------------------------------------------*/
/* File Contents:                                                             */
/*    defs_utils.h                                                            */
/*            This file contains NTIL utilities and constants                 */
/* Project:                                                                   */
/*            SWC DEFS                                                        */
/*----------------------------------------------------------------------------*/

#ifndef __UTILS_H__
#define __UTILS_H__

/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/
/*                                MEMORY ORGANIZATION, LITTLE vs BIG ENDIAN                                */
/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------------------------------------*/
/*                                                                                                         */
/* Swap high byte and low byte                                                                             */
/* SWAP16 operation example:                                                                               */
/* 16bit source: <byte2><byte1>                                                                            */
/* 16bit result: <byte1><byte2>                                                                            */
/*                                                                                                         */
/*---------------------------------------------------------------------------------------------------------*/
#define SWAP16(u16)                                                                                         \
            ( ((UINT16)((u16) & 0x00FF) << 8)                                                               \
            | (((UINT16)(u16) & 0xFF00) >> 8))

/*---------------------------------------------------------------------------------------------------------*/
/*                                                                                                         */
/* Swap high word and low word                                                                             */
/* SWAP32 operation example:                                                                               */
/* 32bit source: <word2><word1>                                                                            */
/* 32bit result: <word1><word2>                                                                            */
/*                                                                                                         */
/*---------------------------------------------------------------------------------------------------------*/
#define SWAP32(u32)                                                                                        \
            ( ((UINT32)((u32) & 0x0000FFFF) << 16)                                                         \
            | (((UINT32)(u32) & 0xFFFF0000) >> 16))

/*---------------------------------------------------------------------------------------------------------*/
/*                                                                                                         */
/* Swap high word and low word                                                                             */
/* SWAP64 operation example:                                                                               */
/* 64bit source: <dword2><dword1>                                                                          */
/* 64bit result: <dword1><dword2>                                                                          */
/*                                                                                                         */
/*---------------------------------------------------------------------------------------------------------*/
#define SWAP64(u64)                                                                                        \
            ( ((UINT64)((u64) & 0x00000000FFFFFFFF) << 32)                                                 \
            | (((UINT64)(u64) & 0xFFFFFFFF00000000) >> 32))


/*---------------------------------------------------------------------------------------------------------*/
/*                                                                                                         */
/* Make byte value from 2 nibble values                                                                    */
/* MAKE8 operation example:                                                                                */
/* Two 4bit sources: <nibble1>, <nibble2>                                                                  */
/* 8bit result:     <nibble2><nibble1>                                                                     */
/*                                                                                                         */
/*---------------------------------------------------------------------------------------------------------*/
#define MAKE8(nlo, nhi)                                                                                    \
    ((UINT8)(((UINT8)(nlo)) | (((UINT8)(nhi)) << 4)))


/*---------------------------------------------------------------------------------------------------------*/
/*                                                                                                         */
/* Make word value from 2 byte values                                                                      */
/* MAKE16 operation example:                                                                               */
/* Two 8bit sources: <byte1>, <byte2>                                                                      */
/* 16bit result:     <byte2><byte1>                                                                        */
/*                                                                                                         */
/*---------------------------------------------------------------------------------------------------------*/
#define MAKE16(blo, bhi)                                                                                    \
    ((UINT16)(((UINT8)(blo)) | (((UINT16)(bhi)) << 8)))

/*---------------------------------------------------------------------------------------------------------*/
/*                                                                                                         */
/* Make long value from 2 word values                                                                      */
/* MAKE32 operation example:                                                                               */
/* Two 16bit sources: <word1>, <word2>                                                                     */
/* 32bit result:      <word2><word1>                                                                       */
/*                                                                                                         */
/*---------------------------------------------------------------------------------------------------------*/
#define MAKE32(wlo, whi)                                                                                   \
    ((UINT32)(((UINT16)(wlo)) | (((UINT32)(whi)) << 16)))

/*---------------------------------------------------------------------------------------------------------*/
/*                                                                                                         */
/* Make long long value from 2 long values                                                                 */
/* MAKE64 operation example:                                                                               */
/* Two 32bit sources: <word1>, <word2>                                                                     */
/* 64bit result:      <word2><word1>                                                                       */
/*                                                                                                         */
/*---------------------------------------------------------------------------------------------------------*/
#define MAKE64(llo, lhi)                                                                                   \
    ((UINT64)(((UINT32)(llo)) | (((UINT64)(lhi)) << 32)))


/*---------------------------------------------------------------------------------------------------------*/
/*                                                                                                         */
/* Big to Little endian convertor - 16 bit                                                                 */
/* LE16 operation example:                                                                                 */
/* 16bit source: <byte2><byte1>                                                                            */
/* 16bit result: <byte1><byte2>                                                                            */
/*                                                                                                         */
/*---------------------------------------------------------------------------------------------------------*/
#define LE16(u16)                                                                                          \
(  ((UINT16)((u16) &   0xFF) << 8)                                                                         \
|  (((UINT16)(u16) & 0xFF00) >> 8)                                                                         \
)

/*---------------------------------------------------------------------------------------------------------*/
/*                                                                                                         */
/* Big to Little endian convertor - 32 bit                                                                 */
/* LE32 operation example:                                                                                 */
/* 32bit source: <byte4><byte3><byte2><byte1>                                                              */
/* 32bit result: <byte1><byte2><byte3><byte4>                                                              */
/*                                                                                                         */
/*---------------------------------------------------------------------------------------------------------*/
#define LE32(u32)                                                                                          \
    MAKE32(LE16(MSW(u32)), LE16(LSW(u32)))

/*---------------------------------------------------------------------------------------------------------*/
/*                                                                                                         */
/* Big to Little endian convertor - 64 bit                                                                 */
/* LE64 operation example:                                                                                 */
/* 64bit source: <byte8><byte7><byte6><byte5><byte4><byte3><byte2><byte1>                                  */
/* 64bit result: <byte1><byte2><byte3><byte4><byte5><byte6><byte7><byte8>                                  */
/*                                                                                                         */
/*---------------------------------------------------------------------------------------------------------*/
#define LE64(u64)                                                                                          \
    MAKE64(LE32(MSD(u64)), LE32(LSD(u64)))

/*---------------------------------------------------------------------------------------------------------*/
/* Extracting Nibble - 4 bit: MSN, LSN                                                                     */
/*---------------------------------------------------------------------------------------------------------*/
#define MSN(u8)        ((UINT8)((UINT8)(u8) >> 4))
#define LSN(u8)        ((UINT8)((UINT8)u8 & 0x0F))

/*---------------------------------------------------------------------------------------------------------*/
/* Extracting Byte - 8 bit: MSB, LSB                                                                       */
/*---------------------------------------------------------------------------------------------------------*/
#define MSB(u16)        ((UINT8)((UINT16)(u16) >> 8))
#define LSB(u16)        ((UINT8)(u16))

/*---------------------------------------------------------------------------------------------------------*/
/* Extracting Word - 16 bit: MSW, LSW                                                                      */
/*---------------------------------------------------------------------------------------------------------*/
#define MSW(u32)        ((UINT16)((UINT32)(u32) >> 16))
#define LSW(u32)        ((UINT16)(u32))

/*---------------------------------------------------------------------------------------------------------*/
/* Extracting Double Word - 32 bit: MSD, LSD                                                               */
/*---------------------------------------------------------------------------------------------------------*/
#define MSD(u64)        ((UINT32)((UINT64)(u64) >> 32))
#define LSD(u64)        ((UINT32)(u64))


/*---------------------------------------------------------------------------------------------------------*/
/* Extracting bytes from DWORD - 32 bit                                                                    */
/*---------------------------------------------------------------------------------------------------------*/
#define MSB0(u32)       ((UINT8)(((UINT32)(u32) & 0xFF000000) >> 24))
#define MSB1(u32)       ((UINT8)(((UINT32)(u32) & 0xFF0000) >> 16))
#define MSB2(u32)       ((UINT8)(((UINT16)(u32) & 0xFF00) >> 8))
#define MSB3(u32)       ((UINT8)((u32) & 0xFF))

#define LSB0(u32)       MSB3(u32)
#define LSB1(u32)       MSB2(u32)
#define LSB2(u32)       MSB1(u32)
#define LSB3(u32)       MSB0(u32)

/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/
/*                                             UTILITY MACROS                                              */
/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/
#define _CONCAT2(a,b)           a##b
#define _STRINGX(x)             #x

/*---------------------------------------------------------------------------------------------------------*/
/* Concatenate strings macros                                                                              */
/*---------------------------------------------------------------------------------------------------------*/
#define CONCAT2(a,b)            _CONCAT2(a,b)
#define CONCAT3(a,b,c)          CONCAT2(a,CONCAT2(b,c))
#define CONCAT4(a,b,c,d)        CONCAT2(a,CONCAT3(b,c,d))
#define CONCAT5(a,b,c,d,e)      CONCAT2(a,CONCAT4(b,c,d,e))

/*---------------------------------------------------------------------------------------------------------*/
/* Transform constant to string                                                                            */
/*---------------------------------------------------------------------------------------------------------*/
#define STRINGX(x)              _STRINGX(x)

/*---------------------------------------------------------------------------------------------------------*/
/* calculate maximum value                                                                                 */
/*---------------------------------------------------------------------------------------------------------*/
#define MAX(a, b)               ((a)>(b) ? (a) : (b))

/*---------------------------------------------------------------------------------------------------------*/
/* calculate minimum value                                                                                 */
/*---------------------------------------------------------------------------------------------------------*/
#define MIN(a, b)               ((a)<(b) ? (a) : (b))

/*---------------------------------------------------------------------------------------------------------*/
/* calculate absolute value                                                                                */
/*---------------------------------------------------------------------------------------------------------*/
#define ABS(a)                  ((a)>(0) ? (a) : -(a))

/*---------------------------------------------------------------------------------------------------------*/
/* calculate modulus                                                                                       */
/*---------------------------------------------------------------------------------------------------------*/
#define MOD(a,b)                ((a) - ((a)/(b))*(b))

/*---------------------------------------------------------------------------------------------------------*/
/* calculate integer division with rounding                                                                */
/*---------------------------------------------------------------------------------------------------------*/
#define DIV_ROUND(a, b)         (((a) + ((b)/2)) / (b))

/*---------------------------------------------------------------------------------------------------------*/
/* calculate integer division with rounding up                                                             */
/*---------------------------------------------------------------------------------------------------------*/
#define DIV_CEILING(a, b)       (((a) + ((b)-1)) / (b))

/*---------------------------------------------------------------------------------------------------------*/
/* calculate average of two integers                                                                       */
/*---------------------------------------------------------------------------------------------------------*/
#define AVG(a,b)                DIV_ROUND(((a)+(b)),2)

/*---------------------------------------------------------------------------------------------------------*/
/* calculate square                                                                                        */
/*---------------------------------------------------------------------------------------------------------*/
#define SQR(a)                  ((a)*(a))

/*---------------------------------------------------------------------------------------------------------*/
/* calculate LOG                                                                                           */
/*---------------------------------------------------------------------------------------------------------*/
#define LOG_1(n)                (((n) >= 2) ? 1 : 0)
#define LOG_2(n)                (((n) >= 1<<2) ? (2 + LOG_1((n)>>2)) : LOG_1(n))
#define LOG_4(n)                (((n) >= 1<<4) ? (4 + LOG_2((n)>>4)) : LOG_2(n))
#define LOG_8(n)                (((n) >= 1<<8) ? (8 + LOG_4((n)>>8)) : LOG_4(n))
#define LOG(n)                  (((n) >= 1<<16) ? (16 + LOG_8((n)>>16)) : LOG_8(n))

/*---------------------------------------------------------------------------------------------------------*/
/* Determine if number is even                                                                             */
/*---------------------------------------------------------------------------------------------------------*/
#define IS_EVEN(a)              ((a)%2 == 0)

/*---------------------------------------------------------------------------------------------------------*/
/* Determine if number is odd                                                                              */
/*---------------------------------------------------------------------------------------------------------*/
#define IS_ODD(a)               (!IS_EVEN(a))

/*---------------------------------------------------------------------------------------------------------*/
/* Calculate size of statically declared array                                                             */
/*---------------------------------------------------------------------------------------------------------*/
#ifndef ARRAY_SIZE
#if defined (__LINUX_KERNEL_ONLY__)
#define ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0]) + __must_be_array(arr))
#else
#define ARRAY_SIZE(a)   (sizeof(a) / sizeof((a)[0]))
#endif
#endif

/*---------------------------------------------------------------------------------------------------------*/
/* calculate alignment of address (1, 2 or 4)                                                              */
/*---------------------------------------------------------------------------------------------------------*/
#define ALIGNMENT(a)            (((((UINT32)(a)) % 4) == 1) ? 1 : (4 - (((UINT32)(a)) % 4)))

/*---------------------------------------------------------------------------------------------------------*/
/* Round (up) the number (val) on the (n) boundary. (n) must be power of 2                                 */
/*---------------------------------------------------------------------------------------------------------*/
#define ROUND_UP(val, n)     ( ((val)+(n)-1) & ~((n)-1) )

/*---------------------------------------------------------------------------------------------------------*/
/* Round (down) the number(val)on the (n) boundary. (n) must be power of 2                                 */
/*---------------------------------------------------------------------------------------------------------*/
#define ROUND_DOWN(val, n)   (  (val)        & ~((n)-1) )

/*---------------------------------------------------------------------------------------------------------*/
/* Round (up) the number (val) to the nearest power of 2 (pow)                                             */
/*---------------------------------------------------------------------------------------------------------*/
#define ROUND_UP_POWER2(val, pow)    {                                                                     \
                                         pow = val;                                                        \
                                         pow--;                                                            \
                                         pow |= pow >> 1;                                                  \
                                         pow |= pow >> 2;                                                  \
                                         pow |= pow >> 4;                                                  \
                                         pow |= pow >> 8;                                                  \
                                         pow |= pow >> 16;                                                 \
                                         pow++;                                                            \
                                     }

/*---------------------------------------------------------------------------------------------------------*/
/* Atomic operation                                                                                        */
/*---------------------------------------------------------------------------------------------------------*/
#define ATOMIC_OP(exp)       {                                                                             \
                                INT var = 0;                                                               \
                                INTERRUPTS_SAVE_DISABLE(var);                                              \
                                exp;                                                                       \
                                INTERRUPTS_RESTORE(var);                                                   \
                             }

/*---------------------------------------------------------------------------------------------------------*/
/* Execution of a function from pointer                                                                    */
/*---------------------------------------------------------------------------------------------------------*/
/* Call the macro in the following way:                                                                    */
/* EXECUTE_FUNC( func, (arg1, arg2))                                                                       */
/* EXECUTE_FUNC_RET( retvar, func, (arg1, arg2, arg3))                                                     */
/* EXECUTE_FUNC_RET_VALUE( func, (arg1, arg2, arg3), default_return_value)                                 */
/*---------------------------------------------------------------------------------------------------------*/
#define EXECUTE_FUNC(func, args)                    \
    if (func != NULL)                               \
    {                                               \
        func args;                                  \
    }

#define EXECUTE_FUNC_RET(ret, func, args)           \
    if (func != NULL)                               \
    {                                               \
        ret = func args;                            \
    }

#define EXECUTE_FUNC_RET_VALUE(func, args, default_value)   ((func != NULL)? func args : default_value)

#define JUMP_TO_ADDRESS(addr)      ((void(*)(void))(addr))()

/*---------------------------------------------------------------------------------------------------------*/
/* Generic Array structure                                                                                 */
/*---------------------------------------------------------------------------------------------------------*/
typedef struct
{
    UINT32* array;
    UINT32  arraySize;
} ARRAY_32_T;

/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/
/*                                            MEASUREMENT UNITS                                            */
/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------------------------------------*/
/* Capacity (basic unit : byte)                                                                            */
/*---------------------------------------------------------------------------------------------------------*/
#define   _1B_            1UL
#define   _2B_            (   2 * _1B_   )
#define   _4B_            (   2 * _2B_   )
#define   _8B_            (   2 * _4B_   )
#define  _16B_            (   2 * _8B_   )
#define  _32B_            (   2 * _16B_  )
#define  _64B_            (   2 * _32B_  )
#define _128B_            (   2 * _64B_  )
#define _256B_            (   2 * _128B_ )
#define _512B_            (   2 * _256B_ )

#define   _1KB_           (1024 * _1B_    )
#define   _2KB_           (   2 * _1KB_   )
#define   _4KB_           (   2 * _2KB_   )
#define   _8KB_           (   2 * _4KB_   )
#define  _16KB_           (   2 * _8KB_   )
#define  _32KB_           (   2 * _16KB_  )
#define  _64KB_           (   2 * _32KB_  )
#define _128KB_           (   2 * _64KB_  )
#define _256KB_           (   2 * _128KB_ )
#define _512KB_           (   2 * _256KB_ )

#define   _1MB_           (1024 * _1KB_   )
#define   _2MB_           (   2 * _1MB_   )
#define   _4MB_           (   2 * _2MB_   )
#define   _8MB_           (   2 * _4MB_   )
#define  _16MB_           (   2 * _8MB_   )
#define  _32MB_           (   2 * _16MB_  )
#define  _64MB_           (   2 * _32MB_  )
#define _128MB_           (   2 * _64MB_  )
#define _256MB_           (   2 * _128MB_ )
#define _512MB_           (   2 * _256MB_ )

#define   _1GB_           (1024 * _1MB_   )
#define   _2GB_           (   2 * _1GB_   )
#define   _4GB_           (   2 * _2GB_   )
#define   _8GB_           (   2 * _4GB_   )
#define  _16GB_           (   2 * _8GB_   )
#define  _32GB_           (   2 * _16GB_  )
#define  _64GB_           (   2 * _32GB_  )
#define _128GB_           (   2 * _64GB_  )
#define _256GB_           (   2 * _128GB_ )
#define _512GB_           (   2 * _256GB_ )

/*---------------------------------------------------------------------------------------------------------*/
/* Frequency (basic unit : hertz)                                                                          */
/*---------------------------------------------------------------------------------------------------------*/
#define _1Hz_           1UL
#define _1KHz_          (1000 * _1Hz_ )
#define _1MHz_          (1000 * _1KHz_)
#define _1GHz_          (1000 * _1MHz_)

/*---------------------------------------------------------------------------------------------------------*/
/* Voltage (basic unit : millivolt)                                                                        */
/*---------------------------------------------------------------------------------------------------------*/
#define _1mV_           1UL
#define _1V_            (1000 * _1mV_)

/*---------------------------------------------------------------------------------------------------------*/
/* Time                                                                                                    */
/*---------------------------------------------------------------------------------------------------------*/
#define _1USEC_IN_NSEC_     1000UL

#define _1MSEC_IN_USEC_     1000UL
#define _1MSEC_IN_NSEC_     ((_1MSEC_IN_USEC_) * (_1USEC_IN_NSEC_))

#define _1SEC_IN_MSEC_      1000UL
#define _1SEC_IN_USEC_      ((_1SEC_IN_MSEC_) * (_1MSEC_IN_USEC_))
#define _1SEC_IN_NSEC_      ((_1SEC_IN_MSEC_) * (_1MSEC_IN_NSEC_))

#define _1MIN_IN_SEC_       60UL
#define _1MIN_IN_MSEC_      ((_1MIN_IN_SEC_) * (_1SEC_IN_MSEC_))
#define _1MIN_IN_USEC_      ((_1MIN_IN_SEC_) * (_1SEC_IN_USEC_))
#define _1MIN_IN_NSEC_      ((_1MIN_IN_SEC_) * (_1SEC_IN_NSEC_))

#define _1HOUR_IN_MIN_      60UL
#define _1HOUR_IN_SEC_      ((_1HOUR_IN_MIN_) * (_1MIN_IN_SEC_))
#define _1HOUR_IN_MSEC_     ((_1HOUR_IN_MIN_) * (_1MIN_IN_MSEC_))
#define _1HOUR_IN_USEC_     ((_1HOUR_IN_MIN_) * (_1MIN_IN_USEC_))
#define _1HOUR_IN_NSEC_     ((_1HOUR_IN_MIN_) * (_1MIN_IN_NSEC_))

#define _1DAY_IN_HOURS_     24UL
#define _1DAY_IN_MIN_       ((_1DAY_IN_HOURS_) * (_1HOUR_IN_MIN_))
#define _1DAY_IN_SEC_       ((_1DAY_IN_HOURS_) * (_1HOUR_IN_SEC_))
#define _1DAY_IN_MSEC_      ((_1DAY_IN_HOURS_) * (_1HOUR_IN_MSEC_))
#define _1DAY_IN_USEC_      ((_1DAY_IN_HOURS_) * (_1HOUR_IN_USEC_))
#define _1DAY_IN_NSEC_      ((_1DAY_IN_HOURS_) * (_1HOUR_IN_NSEC_))

#endif /* __UTILS_H__ */
